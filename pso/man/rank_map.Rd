% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rank_map.R
\name{rank_map}
\alias{rank_map}
\title{Rank Mapping Function}
\usage{
rank_map(x, a = 0.25, p = 2, N = NULL)
}
\arguments{
\item{x}{Numeric vector of values. If the values are not naturals, they will be ranked, and the largest rank will become \eqn{N}.}

\item{a}{A numeric value in the interval \eqn{[0, 1)} that specifies the function's value at \eqn{x = N}.}

\item{p}{A positive numeric value that controls the steepness of the function. Larger values result in a steeper decrease.}

\item{N}{Optional. An integer representing the upper bound of the set \eqn{A = [1, N]}. If not provided, \eqn{N} is set to the largest rank of \code{x}.}
}
\value{
A numeric vector of the same length as \code{x}, containing the mapped values \eqn{f(x)}.
}
\description{
This function defines a nonlinear mapping from a set of natural numbers \eqn{A = [1, N] \subset  \mathbb{N}}
to the real interval \eqn{[0, 1] \subset \mathbb{R}} using a specified steepness parameter \eqn{p}.
}
\details{
The function \eqn{f: A \mapsto [0, 1]} is defined such that:
\itemize{
\item \eqn{f(1) = 1}
\item \eqn{f(N) = a}, where \eqn{a \in [0, 1)}
\item \eqn{f(x)} is monotonically decreasing from \eqn{1} to \eqn{N}, meaning \eqn{f(1)} is the largest value and \eqn{f(N)} is the smallest.
}

If the supplied numeric vector \code{x} is not a set of natural numbers, the function will automatically rank the elements in \code{x} and proceed with the largest rank as \eqn{N}.

The function is given by the following monotonic transformation of a power function.
\deqn{f(x) = a + (1 - a) \cdot \left(1 - \left(\dfrac{x - 1}{N - 1}\right)^p\right)}
}
\examples{
N = 1000
swarm <- initialize_swarm(N, -2, 2)
objective_function <- function(x) { sum(x^2) }
fitness <- evaluate_fitness(swarm$X, objective_function)

trials <- rbinom(N, size = 1, prob = rank_map(fitness)) == 1


fit_df <- data.frame(
  fitness = fitness,
  index  = 1:N
)
plot(x = fit_df$index, y = fit_df$fitness)
points(x = fit_df[!trials, "index"], y = fit_df[!trials, "fitness"], col = 'red')
}
